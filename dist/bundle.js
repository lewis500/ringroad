(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Car, Ctrl, S, Traffic, _, angular, colors, d3, visDer;

angular = require('angular');

d3 = require('d3');

_ = require('lodash');

S = {
  num_cars: 200,
  time: 0,
  space: 5,
  pace: .1,
  stopping_time: 4,
  distance: 45,
  beta: .5,
  gamma: 2,
  day: 0,
  advance: function() {
    return this.time++;
  },
  reset_time: function() {
    return this.time = 0;
  }
};

Traffic = (function() {
  function Traffic() {}

  Traffic.prototype.reset = function(waiting) {
    this.waiting = waiting.splice(0);
    this.traveling = [];
    this.memory = [];
    return this.short_memory = [];
  };

  Traffic.prototype.done = function() {
    return this.waiting.length === 0 && this.traveling.length === 0;
  };

  Traffic.prototype.choice_stage = function() {};

  Traffic.prototype.receive = function(car) {
    var g0, loc;
    loc = _.random(0, 360);
    g0 = 0;
    _.forEach(this.traveling, function(c) {
      var g;
      g = c.get_gap();
      if (g >= S.space && g > g0) {
        loc = (c.loc + g / 2) % 360;
        return g0 = g;
      }
    });
    car.enter(loc);
    this.traveling.push(car);
    return this.order_cars();
  };

  Traffic.prototype.update = function() {
    this.waiting.forEach((function(_this) {
      return function(car) {
        if (car.entering(S.time)) {
          _.remove(_this.waiting, car);
          return _this.receive(car);
        }
      };
    })(this));
    this.traveling.forEach((function(_this) {
      return function(car) {
        car.move();
        if (car.exited) {
          return _.remove(_this.traveling, car);
        }
      };
    })(this));
    return this.order_cars();
  };

  Traffic.prototype.remember = function(d) {
    var res;
    this.short_memory.push(d);
    if (this.short_memory.length >= 3) {
      res = {
        f: 0,
        v: 0,
        a: 0
      };
      this.short_memory.forEach(function(d) {
        res.f += d.f / 3;
        res.v += d.v / 3;
        return res.a += d.a / 3;
      });
      this.short_memory = [];
      this.memory.push(res);
      if (this.memory.length > 80) {
        return this.memory.shift();
      }
    }
  };

  Traffic.prototype.order_cars = function() {
    var l, v;
    this.traveling.sort(function(a, b) {
      return a.loc - b.loc;
    });
    v = 0;
    l = this.traveling.length;
    if (l > 1) {
      return this.traveling.forEach(function(car, i, k) {
        if (!car.stopped) {
          v++;
        }
        car.set_next(k[(i + 1) % l]);
        return car.set_prev(k[(i === 0 ? l - 1 : i - 1)]);
      });
    }
  };

  return Traffic;

})();

Car = (function() {
  function Car(distance) {
    this.distance = distance;
    this.id = _.uniqueId();
    this.t_en = _.random(1, 225);
    this.exited = false;
    this.next = {
      loc: 361
    };
  }

  Car.prototype.entering = function(t) {
    return this.t_en < t;
  };

  Car.prototype.set_next = function(next) {
    this.next = next;
  };

  Car.prototype.set_prev = function(prev) {
    this.prev = prev;
  };

  Car.prototype.exit = function() {
    this.t_ex = S.time;
    return this.exited = true;
  };

  Car.prototype.enter = function(loc1) {
    this.loc = loc1;
    this.stopped = 0;
    this.destination = (this.loc + this.distance) % 360;
    return this.color = colors(this.destination);
  };

  Car.prototype.get_gap = function() {
    var gap;
    gap = this.next.loc - this.loc;
    if (gap < 0) {
      return gap + 360;
    } else {
      return gap;
    }
  };

  Car.prototype.eval_costs = function() {
    var sd;
    sd = S.wish_time;
    return this.cost = (this.t_ex - this.t_en) + Math.max;
  };

  Car.prototype.move = function() {
    if (this.stopped > 0) {
      return this.stopped--;
    } else {
      if (this.get_gap() >= S.space) {
        this.loc = (this.loc + 1) % 360;
        if (this.loc === this.destination) {
          return this.exit();
        }
      } else {
        return this.stopped = S.stopping_time;
      }
    }
  };

  return Car;

})();

colors = d3.scale.linear().domain([0, 60, 120, 180, 240]).range(['#F44336', '#E91E63', '#2196F3', '#00BCD4', '#4CAF50']);

Ctrl = (function() {
  function Ctrl(scope, el) {
    this.scope = scope;
    _.assign(this, {
      paused: true,
      physics: true,
      colors: colors,
      traffic: new Traffic,
      pal: _.range(0, 360, 20)
    });
    this.cars = _.range(S.num_cars).map(function(n) {
      return new Car(S.distance);
    });
    this.day_start();
  }

  Ctrl.prototype.rotator = function(car) {
    return "rotate(" + car.loc + ")";
  };

  Ctrl.prototype.tran = function(tran) {
    return tran.transition().duration(S.pace);
  };

  Ctrl.prototype.day_start = function() {
    S.day++;
    S.reset_time();
    this.physics = true;
    this.traffic.reset(this.cars);
    return this.tick();
  };

  Ctrl.prototype.day_end = function() {
    this.physics = false;
    return this.traffic.choice_stage();
  };

  Ctrl.prototype.click = function() {
    if (this.paused) {
      return this.play();
    } else {
      return this.pause();
    }
  };

  Ctrl.prototype.pause = function() {
    return this.paused = true;
  };

  Ctrl.prototype.tick = function() {
    if (!this.physics) {
      return;
    }
    return d3.timer((function(_this) {
      return function() {
        if (_this.traffic.done()) {
          _this.day_end();
          true;
        }
        S.advance();
        _this.traffic.update();
        _this.scope.$evalAsync();
        if (!_this.paused) {
          _this.tick();
        }
        return true;
      };
    })(this), S.pace * 1000);
  };

  Ctrl.prototype.play = function() {
    this.pause();
    d3.timer.flush();
    this.paused = false;
    return this.tick();
  };

  return Ctrl;

})();

visDer = function() {
  var directive;
  return directive = {
    scope: {},
    controllerAs: 'vm',
    templateUrl: './dist/vis.html',
    controller: ['$scope', '$element', Ctrl]
  };
};

angular.module('mainApp', [require('angular-material')]).directive('visDer', visDer).directive('datum', require('./directives/datum')).directive('d3Der', require('./directives/d3Der'));



},{"./directives/d3Der":2,"./directives/datum":3,"angular":undefined,"angular-material":undefined,"d3":undefined,"lodash":undefined}],2:[function(require,module,exports){
var angular, d3, der;

d3 = require('d3');

angular = require('angular');

der = function($parse) {
  var directive;
  return directive = {
    restrict: 'A',
    scope: {
      d3Der: '=',
      tran: '='
    },
    link: function(scope, el, attr) {
      var hasTransitioned, sel, u;
      sel = d3.select(el[0]);
      u = 't-' + Math.random();
      hasTransitioned = false;
      return scope.$watch('d3Der', function(v) {
        if (scope.tran && hasTransitioned) {
          hasTransitioned = true;
          return sel.transition(u).attr(v).call(scope.tran);
        } else {
          hasTransitioned = true;
          return sel.attr(v);
        }
      }, true);
    }
  };
};

module.exports = der;



},{"angular":undefined,"d3":undefined}],3:[function(require,module,exports){
module.exports = function($parse) {
  return function(scope, el, attr) {
    return d3.select(el[0]).datum($parse(attr.datum)(scope));
  };
};



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
