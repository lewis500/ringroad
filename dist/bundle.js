(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Car, Ctrl, S, Traffic, _, angular, d3, ref, visDer;

angular = require('angular');

d3 = require('d3');

_ = require('lodash');

S = require('./settings');

ref = require('./models'), Car = ref.Car, Traffic = ref.Traffic;

Ctrl = (function() {
  function Ctrl(scope, el) {
    this.scope = scope;
    _.assign(this, {
      paused: true,
      colors: S.colors,
      traffic: new Traffic,
      pal: _.range(0, 360, 20)
    });
    this.cars = _.range(S.num_cars).map(function(n) {
      return new Car(S.distance);
    });
    this.day_start();
  }

  Ctrl.prototype.rotator = function(car) {
    return "rotate(" + car.loc + ")";
  };

  Ctrl.prototype.tran = function(tran) {
    return tran.transition().duration(S.pace);
  };

  Ctrl.prototype.day_start = function() {
    S.reset_time();
    this.physics = true;
    this.traffic.reset(this.cars);
    _.invoke(this.cars, 'assign_error');
    return this.tick();
  };

  Ctrl.prototype.day_end = function() {
    this.physics = false;
    _.invoke(this.cars, 'eval_cost');
    _.sample(this.cars, 25).forEach(function(d) {
      return d.choose();
    });
    return setTimeout((function(_this) {
      return function() {
        return _this.day_start();
      };
    })(this));
  };

  Ctrl.prototype.click = function(val) {
    if (!val) {
      return this.play();
    }
  };

  Ctrl.prototype.pause = function() {
    return this.paused = true;
  };

  Ctrl.prototype.tick = function() {
    if (!this.physics) {
      return;
    }
    return d3.timer((function(_this) {
      return function() {
        if (_this.traffic.done()) {
          _this.day_end();
          true;
        }
        S.advance();
        _this.traffic.update();
        _this.scope.$evalAsync();
        if (!_this.paused) {
          _this.tick();
        }
        return true;
      };
    })(this), S.pace * 1000);
  };

  Ctrl.prototype.play = function() {
    this.pause();
    d3.timer.flush();
    this.paused = false;
    return this.tick();
  };

  return Ctrl;

})();

visDer = function() {
  var directive;
  return directive = {
    scope: {},
    controllerAs: 'vm',
    templateUrl: './dist/vis.html',
    controller: ['$scope', '$element', Ctrl]
  };
};

angular.module('mainApp', [require('angular-material')]).directive('visDer', visDer).directive('datum', require('./directives/datum')).directive('d3Der', require('./directives/d3Der')).directive('cumChart', require('./cumChart'));



},{"./cumChart":2,"./directives/d3Der":3,"./directives/datum":4,"./models":5,"./settings":6,"angular":undefined,"angular-material":undefined,"d3":undefined,"lodash":undefined}],2:[function(require,module,exports){
var Ctrl, S, _, d3, der;

d3 = require('d3');

_ = require('lodash');

S = require('./settings');

Ctrl = (function() {
  function Ctrl(scope, el) {
    this.scope = scope;
    _.assign(this, {
      width: 300,
      height: 300,
      m: {
        t: 10,
        l: 20,
        r: 10,
        b: 20
      }
    });
    this.hor = d3.scale.linear().domain([0, S.rush_length]).range([0, this.width]);
    this.ver = d3.scale.linear().domain([0, S.num_cars]).range([this.height, 0]);
    this.lineEn = d3.svg.line().x((function(_this) {
      return function(d) {
        return _this.hor(d.time);
      };
    })(this)).y((function(_this) {
      return function(d) {
        return _this.ver(d.cumEn);
      };
    })(this));
    this.lineEx = d3.svg.line().x((function(_this) {
      return function(d) {
        return _this.hor(d.time);
      };
    })(this)).y((function(_this) {
      return function(d) {
        return _this.ver(d.cumEx);
      };
    })(this));
  }

  Ctrl.prototype.ex = function() {
    return this.lineEx(this.cum);
  };

  Ctrl.prototype.en = function() {
    return this.lineEn(this.cum);
  };

  return Ctrl;

})();

der = function() {
  var directive;
  return directive = {
    bindToController: true,
    controllerAs: 'vm',
    scope: {
      cum: '='
    },
    templateUrl: './dist/chart.html',
    controller: ['$scope', '$element', Ctrl]
  };
};

module.exports = der;



},{"./settings":6,"d3":undefined,"lodash":undefined}],3:[function(require,module,exports){
var angular, d3, der;

d3 = require('d3');

angular = require('angular');

der = function($parse) {
  var directive;
  return directive = {
    restrict: 'A',
    scope: {
      d3Der: '=',
      tran: '='
    },
    link: function(scope, el, attr) {
      var hasTransitioned, sel, u;
      sel = d3.select(el[0]);
      u = 't-' + Math.random();
      hasTransitioned = false;
      return scope.$watch('d3Der', function(v) {
        if (scope.tran && hasTransitioned) {
          hasTransitioned = true;
          return sel.transition(u).attr(v).call(scope.tran);
        } else {
          hasTransitioned = true;
          return sel.attr(v);
        }
      }, true);
    }
  };
};

module.exports = der;



},{"angular":undefined,"d3":undefined}],4:[function(require,module,exports){
module.exports = function($parse) {
  return function(scope, el, attr) {
    return d3.select(el[0]).datum($parse(attr.datum)(scope));
  };
};



},{}],5:[function(require,module,exports){
var Car, S, Traffic, _;

S = require('./settings');

_ = require('lodash');

Traffic = (function() {
  function Traffic() {}

  Traffic.prototype.reset = function(waiting) {
    this.waiting = _.clone(waiting);
    this.traveling = [];
    this.cum = [];
    this.cumEn = 0;
    return this.cumEx = 0;
  };

  Traffic.prototype.done = function() {
    return (this.waiting.length + this.traveling.length) === 0;
  };

  Traffic.prototype.log = function() {
    return this.cum.push({
      time: S.time,
      cumEn: this.cumEn,
      cumEx: this.cumEx
    });
  };

  Traffic.prototype.receive = function(car) {
    var g0, loc;
    this.cumEn++;
    loc = _.random(0, 359);
    g0 = 0;
    _.forEach(this.traveling, function(c) {
      var g;
      g = c.get_gap();
      if (_.gte(g, S.space) && _.gt(g, g0)) {
        loc = (c.loc + g / 2) % 360;
        return g0 = g;
      }
    });
    loc = (loc + _.random(-1, 1)) % 360;
    car.enter(loc);
    this.traveling.push(car);
    return this.order_cars();
  };

  Traffic.prototype.remove = function(car) {
    this.cumEx++;
    return _.remove(this.traveling, car);
  };

  Traffic.prototype.update = function() {
    this.waiting.forEach((function(_this) {
      return function(car) {
        if (car.entering(S.time)) {
          _.remove(_this.waiting, car);
          return _this.receive(car);
        }
      };
    })(this));
    this.traveling.forEach((function(_this) {
      return function(car) {
        car.move();
        if (car.exited) {
          return _this.remove(car);
        }
      };
    })(this));
    this.log();
    return this.order_cars();
  };

  Traffic.prototype.order_cars = function() {
    var l;
    l = this.traveling.length;
    if (l > 1) {
      this.traveling.sort(function(a, b) {
        return a.loc - b.loc;
      });
      return this.traveling.forEach(function(car, i, k) {
        return car.set_next(k[(i + 1) % l]);
      });
    }
  };

  return Traffic;

})();

Car = (function() {
  function Car(distance) {
    this.distance = distance;
    _.assign(this, {
      id: _.uniqueId(),
      cost0: Infinity,
      target: _.random(2, S.rush_length - S.distance - 10),
      exited: false
    });
  }

  Car.prototype.assign_error = function() {
    var d, e;
    d = Math.random();
    e = (function() {
      switch (false) {
        case !(d <= 1 / 3):
          return -2;
        case !(2 / 3 < d):
          return 2;
        default:
          return 0;
      }
    })();
    return this.set_t_en(this.target + e);
  };

  Car.prototype.entering = function(t) {
    return this.t_en < t;
  };

  Car.prototype.set_next = function(next) {
    this.next = next;
  };

  Car.prototype.set_t_en = function(t_en) {
    this.t_en = t_en;
  };

  Car.prototype.set_t_ex = function(t_ex) {
    this.t_ex = t_ex;
  };

  Car.prototype.set_destination = function(destination) {
    this.destination = destination;
  };

  Car.prototype.set_color = function(color) {
    this.color = color;
  };

  Car.prototype.set_target = function(target) {
    this.target = target;
  };

  Car.prototype.set_cost0 = function(cost0) {
    this.cost0 = cost0;
  };

  Car.prototype.get_gap = function() {
    var gap;
    if (!this.next) {
      return 180;
    }
    gap = this.next.loc - this.loc;
    if (_.lte(gap, 0)) {
      return _.add(gap, 360);
    } else {
      return gap;
    }
  };

  Car.prototype.exit = function() {
    this.next = void 0;
    this.t_ex = S.time;
    return this.exited = true;
  };

  Car.prototype.eval_cost = function() {
    this.sd = this.t_ex - S.wish;
    this.sp = Math.max(-S.beta * this.sd, S.gamma * this.sd);
    this.tt = this.t_ex - this.t_en;
    return this.cost = this.tt + this.sp;
  };

  Car.prototype.choose = function() {
    if (_.lte(this.cost, this.cost0)) {
      this.cost0 = this.cost;
      return this.target = this.t_en;
    }
  };

  Car.prototype.enter = function(loc1) {
    this.loc = loc1;
    this.cost0 = this.cost;
    this.exited = false;
    this.set_destination((this.loc + this.distance) % 360);
    this.set_color(S.colors(this.destination));
    return this.stopped = 0;
  };

  Car.prototype.move = function() {
    if (this.stopped > 0) {
      return this.stopped--;
    } else {
      if (_.gte(this.get_gap(), S.space)) {
        this.loc = _.add(this.loc, 1) % 360;
        if (this.loc === this.destination) {
          return this.exit();
        }
      } else {
        return this.stopped = S.stopping_time;
      }
    }
  };

  return Car;

})();

module.exports = {
  Car: Car,
  Traffic: Traffic
};



},{"./settings":6,"lodash":undefined}],6:[function(require,module,exports){
var S, colors, d3;

d3 = require('d3');

colors = d3.scale.linear().domain([0, 60, 120, 180, 240]).range(['#F44336', '#E91E63', '#2196F3', '#00BCD4', '#4CAF50']);

S = {
  num_cars: 60,
  time: 0,
  space: 5,
  pace: .025,
  stopping_time: 6,
  distance: 28,
  beta: .5,
  gamma: 2,
  rush_length: 100,
  wish: 50,
  day: 0,
  advance: function() {
    return this.time++;
  },
  reset_time: function() {
    return this.time = 0;
  },
  colors: colors
};

module.exports = S;



},{"d3":undefined}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
